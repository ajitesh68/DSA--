A+( 40 min)


class Solution {
public:
    int findMin(vector<int>& nums) {
        if (nums.empty()) {
            return -1; 
        }

        int n = nums.size();
        int low = 0, high = n - 1;

        if (nums[low] <= nums[high]) {
            return nums[low];
        }

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (mid < n - 1 && nums[mid] > nums[mid + 1]) {
                return nums[mid + 1];
            }
            
            if (mid > 0 && nums[mid] < nums[mid - 1]) {
                return nums[mid];
            }

            if (nums[mid] > nums[0]) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
                
        return -1;
    }
};



more cleaner :- 

class Solution {
public:
    int findMin(vector<int>& nums) {
    int low=0,high=nums.size()-1; 
    int mid;
    while(low<=high)
    {   
    mid=(low+high)/2;
    bool isLeftValid = mid > 0;
    bool isRightValid = mid < nums.size() - 1;

    if ((isLeftValid && nums[mid] < nums[mid - 1]) && (isRightValid && nums[mid] < nums[mid + 1])) {
                return nums[mid];
            }
    else if(nums[mid]>nums[high])
    {
        low=mid+1;
    }
    else 
    {
        high=mid-1;
    }
    }
    return nums[mid];
    }
};