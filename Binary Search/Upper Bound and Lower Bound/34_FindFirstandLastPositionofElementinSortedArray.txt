A+


was able to on own after seeing the correct algo 


class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int n = nums.size();
        int low = 0, high = n - 1;

        while (low <= high) {
            int mid = (low + high) / 2;
            if (nums[low] == target && nums[high] == target)
                return {low, high};
            else if (target > nums[mid])
                low = mid + 1;
            else if (target == nums[mid]) {
                if (nums[low] == target && nums[high] != target)
                    high = high - 1;
                else if (nums[low] != target && nums[high] == target)
                    low = low + 1;
                else{
                    low = low + 1;
                    high = high - 1;
                }
            } else
                high = mid - 1;
        }
        return {-1, -1};
    }
};




when I saw this problem for the first time I got confused but able to solve it some how this was not optimal .

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> arr(2,-1);
        int low=0,high=nums.size()-1;
        int mid;
        while(low<=high)
        {
            mid=(low+high)/2;
            if(nums[mid]==target) {
                arr[0]=mid;
                high = mid - 1;
            }
            else if(nums[mid]<target) low=mid+1;
            else high=mid-1;
        }
       
        low=0,high=nums.size()-1;
        while(low<=high)
        {
            mid=(low+high)/2;
            if(nums[mid]==target) {
                arr[1]=mid;
                low = mid + 1;
            }
            else if(nums[mid]<target) low=mid+1;
            else high=mid-1;
            
        }
       
        return arr;  
    }
};