A

only thing I forgot was left = 0 and right = 0 inside helper fnc



class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        vector<vector<int>> dp(obstacleGrid.size(),vector<int>(obstacleGrid[0].size(),-1));
        return helper(obstacleGrid,0,0,dp);
    }
    int helper(vector<vector<int>>& obstacleGrid, int x, int y, vector<vector<int>>& dp) {
        if (obstacleGrid[x][y] == 1)
            return 0;

        if (x == obstacleGrid.size() - 1 && y == obstacleGrid[0].size() - 1) {
            return 1;
        }

        if(dp[x][y]!=-1)return dp[x][y]; 
        int right=0;
        int down=0;

        if (x < obstacleGrid.size() - 1) {
            right = helper(obstacleGrid, x + 1, y, dp);
        }
        if (y < obstacleGrid[0].size() - 1) {
            down = helper(obstacleGrid, x, y + 1, dp);
        }

        return dp[x][y] = right + down;
    }
};




We set

int right = 0;
int down = 0;

inside the helper function because it ensures that if a move is not possible, the contribution from that direction is 0 rather 
than some garbage value or uninitialized variable.




Initial call

helper(0, 0)
Not obstacle ✅
Not destination ✅
right = 0, down = 0 ← initialized here
DOWN move → helper(1, 0)
RIGHT move → helper(0, 1)
Will return right + down.

helper(1, 0)
Not obstacle ✅
Not destination ✅
right = 0, down = 0
DOWN → helper(2, 0)
RIGHT → helper(1, 1)
Return right + down.

helper(2, 0)
Not obstacle ✅
Not destination ✅
right = 0, down = 0
DOWN? ❌ (x = 2 is last row) → skip (right stays 0)
RIGHT → helper(2, 1)
Return right + down.

helper(2, 1)
Not obstacle ✅
Not destination ✅
right = 0, down = 0
DOWN? ❌ (last row) → skip (right stays 0)
RIGHT → helper(2, 2)

helper(2, 2)
Destination ✅ → return 1

Back to helper(2, 1):
right = 0
down = 1 (from helper(2, 2))
Return 0 + 1 = 1

Back to helper(2, 0):
right = 1 (from helper(2, 1))
down = 0 (DOWN was invalid)
Return 1 + 0 = 1

helper(1, 1)
Obstacle ❌ → return 0
Back to helper(1, 0):
right = 1 (from helper(2, 0))
down = 0 (from helper(1, 1))
Return 1 + 0 = 1

helper(0, 1)
Not obstacle ✅
Not destination ✅
right = 0, down = 0
DOWN → helper(1, 1) → returns 0
RIGHT → helper(0, 2) → obstacle → returns 0
Return 0 + 0 = 0

Back to helper(0, 0):
right = 1 (from helper(1, 0))
down = 0 (from helper(0, 1))
Final Return: 1 + 0 = 1

