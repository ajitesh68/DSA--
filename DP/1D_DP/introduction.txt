🔁 DP is just a smarter form of recursion.
We use it when:
A problem has overlapping subproblems → same function calls again & again.
A problem has optimal substructure → best solution of the big problem depends on best solutions of smaller parts.


👨‍🏫 Step 2: Learn by Example — Fibonacci
Let’s implement Fibonacci in 4 ways and understand each step.


📘 1. Basic Recursion (Exponential time)

int fib(int n) {
    if (n <= 1) return n;
    return fib(n-1) + fib(n-2);
}
⛔ Problem: Repeats work again and again. Exponential time (O(2^n)).



🛠 2. Memoization (Top-down DP)
We’ll store the result of fib(n) when we first calculate it — so we never recalculate it.

int fib(int n, vector<int>& dp) {
    if (n <= 1) return n;
    if (dp[n] != -1) return dp[n];  // already calculated
    return dp[n] = fib(n-1, dp) + fib(n-2, dp);
}
🔧 Usage:
int n = 10;
vector<int> dp(n+1, -1);
cout << fib(n, dp);


✅ Time: O(n)
✅ Space: O(n) (for dp array + recursion stack)



📦 3. Tabulation (Bottom-up DP)
Now let’s build the result iteratively:

int fib(int n) {
    vector<int> dp(n+1, 0);
    dp[0] = 0;
    dp[1] = 1;

    for(int i = 2; i <= n; i++) {
        dp[i] = dp[i-1] + dp[i-2];
    }

    return dp[n];
}

✅ Time: O(n)
✅ Space: O(n)



♻️ 4. Space Optimization
Since we only need the last 2 values, we can just store 2 variables:

int fib(int n) {
    if (n <= 1) return n;
    int prev2 = 0, prev1 = 1;

    for(int i = 2; i <= n; i++) {
        int cur = prev1 + prev2;
        prev2 = prev1;
        prev1 = cur;
    }

    return prev1;
}


✅ Time: O(n)
✅ Space: O(1) — best version




| Approach        | Time   | Space |
| --------------- | ------ | ----- |
| Recursion       | O(2^n) | O(n)  |
| Memoization     | O(n)   | O(n)  |
| Tabulation      | O(n)   | O(n)  |
| Space Optimized | O(n)   | O(1)  |
