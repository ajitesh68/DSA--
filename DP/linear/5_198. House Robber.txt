A+





MY approach:-(if you will rob house at index+2 next then you cant rob house at index+3 that's why I used this approach)
class Solution {
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        vector<int> dp(n, -1); 
        
        int from1= helper(nums, 0, dp);
        int from2 = helper(nums, 1, dp);
        return max(from1,from2);
    }

    int helper(vector<int>& nums, int index, vector<int>& dp) {
        if(index >= nums.size()) return 0;

        if(dp[index] != -1) return dp[index];

        int pick2 = nums[index] + helper(nums, index + 2, dp);
        int pick3 = nums[index] + helper(nums, index + 3, dp);

        return dp[index] = max(pick2, pick3);
    }
};



in this type of problem we have two options at every index either choose index+2 or skip and move to index+1 
without adding

int pick = nums[index] + helper(nums, index + 2, dp);
int skip = helper(nums, index + 1, dp);
return dp[index] = max(pick, skip);


tabulation:- 

#include <vector>
#include <algorithm>
using namespace std;

class Solution {
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        if (n == 0) return 0;
        if (n == 1) return nums[0];

        // DP array
        vector<int> dp(n, 0);
        
        // Base cases
        dp[0] = nums[0];
        dp[1] = max(nums[0], nums[1]);
        
        // Fill DP table
        for (int i = 2; i < n; i++) {
            dp[i] = max(dp[i-1], nums[i] + dp[i-2]);
        }
        
        // Maximum money that can be robbed
        return dp[n-1];
    }
};
