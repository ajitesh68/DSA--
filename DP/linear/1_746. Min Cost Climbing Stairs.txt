A+



Tabulation method:-

class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        int n=cost.size();
        vector<int>dp(n , 0);
        dp[0]=cost[0];
        dp[1]=cost[1];
        for(int i=2;i<n;i++){
            dp[i]=cost[i]+min(dp[i-1], dp[i-2]);
        }
        return min(dp[n-1] , dp[n-2]);
    }
};





Memoization method :- 

class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        vector<int> dp(cost.size(),-1);
        int index = 0;
        if(cost.size()==2)return min(cost[0],cost[1]);
        helper(cost,0,dp);
        return min(dp[0],dp[1]);
    }
    int helper(vector<int> cost, int index, vector<int>& dp){
        if(index == cost.size()-1)return cost[cost.size()-1];

        if(dp[index] != -1)return dp[index];

        int op1 = 0;
        int op2 = 0;

        op1 = helper(cost,index+1,dp);
        if(index < cost.size()-2) op2 = helper(cost,index+2,dp);

        return dp[index] = cost[index] + min(op1,op2);
    }
};