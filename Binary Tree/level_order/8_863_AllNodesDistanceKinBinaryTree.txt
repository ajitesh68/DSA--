B

In this problem we create a parent map to travers upward in the tree like graphs 

this is a new kind of problem must try 


class Solution {
public:
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        unordered_map<TreeNode*,TreeNode*> parent;
        buildParentMap(root,parent);

        unordered_set<TreeNode*> visited;
        queue<TreeNode*> q;
        q.push(target);
        visited.insert(target);
        int dist = 0;
        
        while(!q.empty()){
            
            int size=q.size();
            if(dist==k)break;
            dist++;

            for(int i=0;i<size;i++){

                TreeNode* node = q.front();
                q.pop();

                if(node->left && !visited.count(node->left)){
                    visited.insert(node->left);
                    q.push(node->left);
                }
                if(node->right && !visited.count(node->right)){
                    visited.insert(node->right);
                    q.push(node->right);
                }
                if(parent[node] && !visited.count(parent[node])){
                    visited.insert(parent[node]);
                    q.push(parent[node]);
                }

            }


        }
        vector<int> ans;
        while (!q.empty()) {
            ans.push_back(q.front()->val);
            q.pop();
        }
        return ans;  
    }
    void buildParentMap(TreeNode* root, unordered_map<TreeNode*,TreeNode*>& parent){

        queue<TreeNode*> q;
        q.push(root);
        parent[root]=nullptr;
        while(!q.empty()){

            TreeNode* node = q.front();
            q.pop();
            if(node->left){
                parent[node->left]=node;
                q.push(node->left);
            }
            if(node->right){
                parent[node->right]=node;
                q.push(node->right);
            }
        }

    }
};