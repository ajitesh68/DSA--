To check if a particular character (or integer) is present in an unordered_set in C++, you can use the .count() method or the .find() method. Here's how they work:

1. Using .count()
Returns 1 if the element is found, 0 otherwise.

Example:

 std::unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u'};
    
    char ch = 'e';
    if (vowels.count(ch)) {
        std::cout << ch << " is a vowel." << std::endl;
    } else {
        std::cout << ch << " is not a vowel." << std::endl;
    }




    class Solution {
    public:
    int maxVowels(string s, int k) {
        unordered_set<char> vowels = {'a','e','i','o','u'};
        string sub;
        int maxi = 0;
        int max_count = 0; 
        for(int i = 0; i<k ; i++)
        {
            sub += s[i];
            if(vowels.count(s[i])) max_count++;
            maxi = max(maxi,max_count);
        }

        for(int i = k; i<s.size(); i++){
            if(vowels.count(sub[0])) max_count--;
            sub.erase(0,1);
            
            sub += s[i];
            if(vowels.count(s[i])) max_count++;

            maxi = max(maxi,max_count);
        }

        return maxi;
    }
};