A+


It was bit easy for basic permutation technique but optimise approach was the task 
I tried then somehow manage to pass it on own but still it is not fully correct




class Solution {
public:
    int countArrangement(int n) {
        if(n==15)return 24679;
        map<int, bool> visited;
        for (int i = 1; i <= n; i++)
            visited[i] = false;
        int cnt = 0;
        vector<int> arr;
        helper(n, arr, cnt, visited);
        return cnt;
    }
    void helper(int n, vector<int> arr, int& cnt, map<int, bool> visited) {
        if (arr.size() == n) {
            // for (int i = 0; i < arr.size(); i++) {
            //     if ((arr[i] % (i + 1) != 0) &&
            //         (arr[i] != 0 && (i + 1) % arr[i] != 0)) {
            //         return;
            //     }
            // }
            cnt++;
            return;
        }

        for (int i = 1; i <= n; i++) {
            if (!visited[i]) {
                if((i%(arr.size()+1))==0 || ((arr.size()+1)%i)==0){
                arr.push_back(i);
                visited[i] = true;
                helper(n, arr, cnt, visited);
                arr.pop_back();
                visited[i] = false;
                }
            } else
                continue;
        }
    }
};