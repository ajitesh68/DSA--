A

I dont know how to use searching here 

like how to use .count(), find() funtions 


#include <vector>
#include <algorithm> // Required for std::count
#include <string>

// ... (your other code)

int main() {
    std::vector<char> vec;
    std::string s = "example";

    for (int i = 0; i < s.length(); ++i) {
        // Use std::count from <algorithm> to count occurrences
        if (std::count(vec.begin(), vec.end(), s[i]) == 0) {
            // Element s[i] is not present in vec
            // ... (your logic for when the element is not found)
        }
    }
    return 0;
}



optimal code:-

bool isVowel(char ch){
    if((ch=='a')||(ch=='e')||(ch=='i')||(ch=='o')||(ch=='u')||(ch=='A')||(ch=='E')||(ch=='O')||(ch=='I')||(ch=='U')){
        return 1;
    }
    return 0;
}
class Solution {
public:
    string reverseVowels(string s) {
        int start=0;
        int end=s.length()-1;
        while(start<end){
            if((isVowel(s[start]))&&(isVowel(s[end]))){
                swap(s[start],s[end]);
                start++;
                end--;
            }
            else if(isVowel(s[start])){
                end--;
            }
             else //(isVowel(s[end]))
             {
                start++;
            }
        }
      return s;
    }
};





MY CODE:-

class Solution {
public:
    string reverseVowels(string s) {
        vector<char> vec = {'a','e','i','o','u','A','E','I','O','U'};
        int i =0;
        int j = s.size();
        while(i<j){
            if(count(vec.begin(),vec.end(),s[i])==0){
                i++;
            }
            else if(count(vec.begin(),vec.end(),s[j])==0){
                j--;
            }
            else{
                swap(s[i],s[j]);
                i++;
                j--;
            }
        }
        return s;
    }
};



1. std::count() (from <algorithm>)
Usage:
count(vec.begin(), vec.end(), value)
Purpose:
Counts how many times value appears in the container.
Time Complexity:
O(N) → linear time (bad if used in loops)

Not recommended inside loops if you're just checking existence.


2. std::find() (from <algorithm>)
Usage:
if (find(vec.begin(), vec.end(), s[i]) != vec.end())
Purpose:
Finds first occurrence of s[i].
Returns iterator; if not found → returns vec.end()
Time Complexity:
O(N) → linear time (same as .count())


✅ Recommended: Use unordered_set for Fast Lookup
Why?
.count() on unordered_set is O(1) on average.

Perfect for “is this element in the set?” checks.



| Method        | Used With          | Purpose                | Time Complexity | When to Use                        |
| ------------- | ------------------ | ---------------------- | --------------- | ---------------------------------- |
| `count()`     | vector, list       | Count occurrences      | O(N)            | Avoid in loops for existence check |
| `find()`      | vector, list, map  | Get iterator to value  | O(N) or O(logN) | Better, but still linear in vector |
| `set.count()` | set/unordered\_set | Check existence (bool) | O(logN) / O(1)  | ✅ Best for frequent lookup         |
| `map.count()` | map/unordered\_map | Check key existence    | O(logN) / O(1)  | ✅ Best for key checks              |
